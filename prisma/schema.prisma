generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  LEAVE
  RESIGNED
}

// 사용자 변경 유형을 나타내는 Enum (새로 추가)
enum UserChangeType {
  POSITION_CHANGE
  DEPARTMENT_CHANGE
  ROLE_CHANGE
  STATUS_CHANGE
  // 필요한 경우 다른 변경 유형 추가
  OTHER
}

model User {
  id                String                    @id @default(uuid())
  email             String?                   @unique
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  image             String?
  name              String?
  emailVerified     DateTime?
  hireDate          DateTime?                 @db.Date
  position          JobPosition               @default(UNKNOWN)
  department        Department                @default(UNKNOWN)
  role              UserRole                  @default(USER)
  status            UserStatus                @default(ACTIVE)
  phone             String?
  accounts          Account[]
  reservations      Reservation[]
  sessions          Session[]
  tasks             Task[]
  createdTasks      Task[]                    @relation("TaskCreator")
  taskModifications TaskModificationHistory[]
  documents         Document[]
  documentModifications DocumentModificationHistory[]
  createdDocuments Document[] @relation("DocumentCreator")
  userHistory UserHistory[]
  userHistoryAuditor UserHistory[] @relation("UserHistoryAuditor")
}

// 사용자 변경 이력 모델 (범용적)
model UserHistory {
  id              String      @id @default(uuid())
  userId          String      // 어떤 유저의 변경 이력인지
  user            User        @relation(fields: [userId], references: [id]) // User 모델과 관계 설정
  
  changeType      UserChangeType // 어떤 종류의 변경인지 (예: 직급 변경, 부서 변경, 상태 변경)
  fieldName       String?     // 변경된 필드 이름 (예: "position", "department", "status")
  oldValue        String?     // 변경 전 값 (문자열로 저장)
  newValue        String?     // 변경 후 값 (문자열로 저장)
  
  createdAt      DateTime    @default(now()) // 변경 일시
  changedByUserId String?     // 누가 변경했는지 (관리자 ID 등, 옵션)
  changedByUser   User?       @relation("UserHistoryAuditor", fields: [changedByUserId], references: [id]) // 변경자 정보
  reason          String?     // 변경 사유 (예: "승진", "부서 이동", "휴직 처리")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Reservation {
  id          String                @id @default(cuid())
  groupName   String
  dateTime    DateTime
  seatNumber  String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdById String
  status      ReservationStatus     @default(CONFIRMED)
  date        String
  tableId     String?
  menuItems   MenuItem[]
  createdBy   User                  @relation(fields: [createdById], references: [id])
  dailyStats  DailyReservationStats @relation(fields: [date], references: [date])
  table       Table?                @relation(fields: [tableId], references: [id])

  @@index([dateTime])
  @@index([createdById])
  @@index([date])
  @@index([tableId])
}

model MenuItem {
  id            String      @id @default(cuid())
  name          String
  price         Int
  quantity      Int
  reservationId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
}

model Menu {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Int
  category    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DailyReservationStats {
  date              String        @id
  totalReservations Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reservations      Reservation[]
}

model Table {
  id           String        @id @default(uuid())
  seats        Int
  status       TableStatus   @default(AVAILABLE)
  positionX    Float
  positionY    Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  number       Int           @default(0)
  reservations Reservation[]
}

enum BoardType {
  COMMUNITY   // 커뮤니티 게시판
  FOODCARE    // 푸드케어 게시판
  BAJAUL      // 바자울 게시판
  RESTAURANT  // 레스토랑 게시판
  CORP        // 기업 게시판
  OTHER       // 기타 게시판
}

model Document {
  id                  String                    @id @default(uuid())
  title               String
  description         String?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  // assigneeId          String?
  createdById         String?
  isDeleted           Boolean                   @default(false)
  // assignee            User?                     @relation(fields: [assigneeId], references: [id])
  createdBy           User?                     @relation("DocumentCreator", fields: [createdById], references: [id])
  modificationHistory DocumentModificationHistory[]
  boardType           BoardType                 // 게시판 종류를 enum으로 관리
  attachments         Attachment[]            // 다중 파일을 위한 관계 추가

  @@index([boardType, isDeleted, createdAt(sort: Desc)]) 
  User User[]
}

model DocumentModificationHistory {
  id                  String     @id @default(uuid())
  documentId          String
  modifiedAt          DateTime   @default(now())
  modifiedById        String
  previousTitle       String
  previousDescription String?
  previousFileUrl     String?
  previousFileName    String?
  previousFileType    String?
  modifiedBy          User           @relation(fields: [modifiedById], references: [id])
  document            Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([modifiedById])
}

model Attachment {
  id          String   @id @default(uuid())
  fileName    String
  fileType    String
  fileUrl     String   // 저장된 파일의 URL
  createdAt   DateTime @default(now())

  documentId  String   // Document 모델과의 관계를 위한 외래 키
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade) // Document 삭제 시 관련 파일도 삭제 (선택 사항)

  @@index([documentId])
}

model Task {
  id                  String                    @id @default(uuid())
  title               String
  description         String?
  status              TaskStatus                @default(INCOMPLETE)
  dueDate             DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  assigneeId          String?
  fileName            String?
  fileType            String?
  fileUrl             String?
  createdById         String?
  isDeleted           Boolean                   @default(false)
  assignee            User?                     @relation(fields: [assigneeId], references: [id])
  createdBy           User?                     @relation("TaskCreator", fields: [createdById], references: [id])
  modificationHistory TaskModificationHistory[]

  @@index([isDeleted])
}

model TaskModificationHistory {
  id                  String     @id @default(uuid())
  taskId              String
  modifiedAt          DateTime   @default(now())
  modifiedById        String
  previousTitle       String
  previousDescription String?
  previousStatus      TaskStatus
  previousDueDate     DateTime?
  previousAssigneeId  String?
  previousFileUrl     String?
  previousFileName    String?
  previousFileType    String?
  modifiedBy          User       @relation(fields: [modifiedById], references: [id])
  task                Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([modifiedById])
}

enum UserRole {
  ADMIN
  USER
}

enum JobPosition {
  STAFF
  TEAM_LEADER
  GENERAL_SECRETARY
  CHAIRPERSON
  CEO
  UNKNOWN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum Department {
  UNKNOWN
  YOUTH_RESTAURANT
  BAZAUL
  FOOD_CARE_CENTER
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  UNAVAILABLE
}

enum TaskStatus {
  INCOMPLETE
  COMPLETE
}
