datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  UNKNOWN
}

enum JobPosition {
  STAFF
  TEAM_LEADER
  GENERAL_SECRETARY
  CHAIRPERSON
  CEO
  UNKNOWN
} 

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum Department {
  UNKNOWN // 미지정
  YOUTH_RESTAURANT     // 청년식당
  BAZAUL               // 바자울
  FOOD_CARE_CENTER     // 먹거리돌봄센터
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  position      JobPosition @default(UNKNOWN)   // 직급 필드 (enum 사용)
  hireDate      DateTime?   @db.Date           // 입사일 필드 (날짜만 저장, 필요시 Null 허용)
  department Department @default(UNKNOWN) // 부서
  reservations Reservation[] // Reservations created by this user
  phone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]            // 담당하는 태스크 (assignee 관계)
  createdTasks Task[] @relation("TaskCreator") // 생성한 태스크 관계
  
  // 새로운 관계 추가: Task 수정 내역
  taskModifications TaskModificationHistory[] // 사용자가 수행한 Task 수정 내역
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Reservation {
  id         String   @id @default(cuid())
  groupName  String // 예약자/단체명
  dateTime   DateTime // 예약 날짜 및 시간
  seatNumber String // 예약석 번호
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 예약을 등록한 직원 정보
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  // 예약된 메뉴 아이템
  menuItems MenuItem[]

  // 상태 관리
  status ReservationStatus @default(CONFIRMED)

  // 예약 날짜별 통계 연결
  dailyStats DailyReservationStats @relation(fields: [date], references: [date])
  date       String // YYYY-MM-DD 형식

  // 테이블 정보 추가
  tableId String?
  table   Table?  @relation(fields: [tableId], references: [id])

  @@index([dateTime])
  @@index([createdById])
  @@index([date])
  @@index([tableId])
}

model MenuItem {
  id       String @id @default(cuid())
  name     String
  price    Int
  quantity Int

  // 이 메뉴 아이템이 속한 예약
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reservationId])
}

model Menu {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  price       Int
  category    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DailyReservationStats {
  date              String        @id // YYYY-MM-DD 형식
  totalReservations Int           @default(0)
  reservations      Reservation[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// 테이블 모델
model Table {
  id        String      @id @default(uuid())
  number    Int         @default(0) //테이블 번호
  seats     Int // 좌석 수
  status    TableStatus @default(AVAILABLE) // 테이블 상태
  positionX Float // X 좌표
  positionY Float // Y 좌표
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // 테이블에 연결된 예약 정보
  reservations Reservation[]
}

// 테이블 상태 열거형
enum TableStatus {
  AVAILABLE // 이용 가능
  OCCUPIED // 사용 중
  RESERVED // 예약됨
  UNAVAILABLE // 이용 불가
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(INCOMPLETE)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  assigneeId  String?
  assignee    User?   @relation(fields: [assigneeId], references: [id])

  createdById String?
  createdBy   User?   @relation("TaskCreator", fields: [createdById], references: [id])

  fileUrl     String?   // 업로드된 파일의 URL (선택적)
  fileName    String?   // 원본 파일 이름 (선택적)
  fileType    String?   // 파일 MIME 타입 (선택적)
  
  isDeleted   Boolean  @default(false)

  @@index([isDeleted])

  // 새로운 관계 추가: Task 수정 내역
  modificationHistory TaskModificationHistory[]
}

enum TaskStatus {
  INCOMPLETE // 미완료
  COMPLETE // 완료
}

// 수정된 TaskModificationHistory 모델
model TaskModificationHistory {
  id           String   @id @default(uuid())
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  modifiedAt   DateTime @default(now())
  
  // 수정을 수행한 사용자
  modifiedById String
  modifiedBy   User     @relation(fields: [modifiedById], references: [id])
  
  // 수정 전 데이터만 저장
  previousTitle       String
  previousDescription String?
  previousStatus      TaskStatus
  previousDueDate     DateTime?
  previousAssigneeId  String?
  previousFileUrl     String?
  previousFileName    String?
  previousFileType    String?
  
  @@index([taskId])
  @@index([modifiedById])
}